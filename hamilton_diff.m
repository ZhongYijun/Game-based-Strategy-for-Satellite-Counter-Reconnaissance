function [hamilton_f_T, hamilton_f_R] = hamilton_diff(cur_state, cur_ctl,...
    nxt_state, config, coeff)
n = size(cur_state,1);
basis_diff_state = zeros([n, size(basis_fun(config.wgt_mat*cur_state),1)]);
basis_diff_state(:, 2:n+1)= eye(n);
idx = n+1;
for i = n:-1:1
    basis_diff_state(n+1-i:end, idx+(1:i)) = nxt_state(n+1-i, 1)*eye(i);
    basis_diff_state(n+1-i, idx+(2:i)) = nxt_state(n+2-i:end , 1)';
    idx = idx + i;
end
%% 对于微分向量初始化
nxt_state_diff_u_a = zeros([config.ctl_dim, config.att_dim+...
    config.num_rec_sat*config.orb_dim]);
nxt_state_diff_u_0 = zeros(size(nxt_state_diff_u_a));
nxt_state_diff_u_rec = zeros([config.num_rec_sat*config.ctl_dim, config.att_dim+...
    config.num_rec_sat*config.orb_dim]);
u_a_diff_costate = zeros([size(cur_state,1), config.ctl_dim]);
u_0_diff_costate = zeros(size(u_a_diff_costate));
u_rec_diff_costate = zeros([size(cur_state,1), 2*config.ctl_dim]);
%% 计算微分向量
nxt_state_diff_u_a(:, 4:config.att_dim) = config.sample_time_span./config.MI;
u_a_diff_costate(4: config.att_dim, :) = -0.5./config.MI/...
    config.sample_time_span/config.wgt_T2;
for i=1:config.num_rec_sat

    nxt_state_diff_u_0(:, config.att_dim+config.orb_dim*(i-1)+(1:...
        config.orb_dim)) = -config.B_ZOH';

    nxt_state_diff_u_rec((i-1)*config.ctl_dim+(1:config.ctl_dim), ...
        config.att_dim+config.orb_dim*(i-1)+(1:config.orb_dim)) = config.B_ZOH';

    u_0_diff_costate(config.att_dim+config.orb_dim*(i-1)+(1:config.orb_dim)...
        , :) = 0.5*config.B_ZOH/config.sample_time_span/config.wgt_T2;

    u_rec_diff_costate(config.att_dim+(i-1)*config.orb_dim+(1:config.orb_dim)...
        , (i-1)*config.ctl_dim+(1:config.ctl_dim)) = 0.5*config.B_ZOH...
        /config.sample_time_span/config.wgt_R2;
end

hamilton_f_T = config.eta*basis_fun(config.wgt_mat*nxt_state) - basis_fun(...
    config.wgt_mat*cur_state)+basis_diff_state'*config.wgt_mat*u_a_diff_costate*(...
    config.wgt_T2*config.sample_time_span*cur_ctl(1:config.ctl_dim)+...
    config.eta*nxt_state_diff_u_a*config.wgt_mat*basis_diff_state*coeff(:, 1))+...
    basis_diff_state'*config.wgt_mat*u_0_diff_costate*(config.wgt_T2*...
    config.sample_time_span*cur_ctl(config.ctl_dim+(1:config.ctl_dim))+config.eta*...
    nxt_state_diff_u_0*config.wgt_mat*basis_diff_state*coeff(:, 1));

hamilton_f_R = config.eta*basis_fun(config.wgt_mat*nxt_state) - basis_fun(config.wgt_mat*cur_state)+...
    +basis_diff_state'*config.wgt_mat*u_rec_diff_costate*(config.wgt_R2*config.sample_time_span...
    *cur_ctl(2*config.ctl_dim+1:end)+config.eta*nxt_state_diff_u_rec*...
    config.wgt_mat*basis_diff_state*coeff(:, 2));


end