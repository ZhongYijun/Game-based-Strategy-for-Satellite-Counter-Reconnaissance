function [ini_admissible_ctl] = mpc_controller(config, cur_state,...
    state_sample_stack, trans_mat, cur_r, his_obs, cur_ctl, J2L_mat, ...
    unit_ball_sample, non_zero_count)
%
% ctl_att_tgt = zeros(config.ctl_dim, config.num_sample+1);
% ctl_orb_rec = zeros(config.num_rec_sat*config.ctl_dim, config.num_sample+1);
% ctl_orb_tgt = zeros(config.ctl_dim, config.num_sample+1);
% options = optimoptions('fminimax','Algorithm','sqp'); 
ini_admissible_ctl = cur_ctl;

% ctl_att_tgt(:, 1) = u_costate_att(config, costate(1:config.att_dim));
% ctl_orb_tgt(:, 1) = u_costate_orb_tgt(config, costate(config.att_dim+1:end));
% for j=1:config.num_rec_sat
% ctl_orb_rec((j-1)*config.ctl_dim+1:j*config.ctl_dim, 1) = u_costate_orb_rec...
%     (config, costate(config.att_dim+(j-1)*config.orb_dim+1:config.att_dim...
%     +j*config.orb_dim));
% end
theta_max = zeros([config.num_rec_sat, 1]);
for j=1:config.num_rec_sat
    theta_max(j,1) = acos(config.radius_tgt_sat/norm(cur_state(...
           config.att_dim+(j-1)*config.orb_dim+(1:3), 1)));
end

% rng default
% optsc = optimoptions("patternsearch", Algorithm="nups-mads", MaxIterations=10000);
% r_rec = patternsearch( @(tgt_r) rec_seq_gen(config, cur_state, J2L_mat, theta_max,...
%         tgt_r, unit_ball_sample, non_zero_count), r_rec, ...
%         [],[],[],[],[],[], @(tgt_r) norm_cst(config, cur_state, cur_r, tgt_r,...
%         J2L_mat, trans_mat, "V_R"), optsc);
% 
% r_rec = r_rec./vecnorm(r_rec);


% r_tgt=zeros(size(r_rec));
% for i=1:config.num_rec_sat
%     r_tgt(:,i) = mean(unit_ball_sample(non_zero_count_stack(:,i) > 0, :));
% end
% r_tgt = r_tgt./vecnorm(r_tgt);

opts = optimoptions("fmincon", 'Algorithm', "sqp", 'MaxIterations', 5000);
for i=1:config.num_sample + 1
    ini_ctl_seq = repmat(cur_ctl(:,i), 1, config.T_sampling);
    % ini_ctl_seq(config.ctl_dim + (1:config.ctl_dim),:) = config.tgt_orb_u_max...
    %     *ini_ctl_seq(config.ctl_dim + (1:config.ctl_dim),:)./vecnorm(...
    %     ini_ctl_seq(config.ctl_dim + (1:config.ctl_dim),:));
    % for j=1:config.num_rec_sat
    %     ini_ctl_seq((j+1)*config.ctl_dim + (1:config.ctl_dim),:) = ...
    %         config.rec_orb_u_max(j)*ini_ctl_seq((j+1)*config.ctl_dim + (1:...
    %         config.ctl_dim),:)./vecnorm(ini_ctl_seq((j+1)*config.ctl_dim +...
    %         (1:config.ctl_dim),:));
    % end
    if i==1

        ctl_seq_r = fmincon(@(ctl_seq) loss_fun(config, cur_state, ...
            [ini_ctl_seq(1:2*config.ctl_dim, :);ctl_seq], his_obs, J2L_mat,...
             "V_R",unit_ball_sample, non_zero_count), ini_ctl_seq( ...
             2*config.ctl_dim+1:end, :),[],[],[],[],[],[], @(ctl_seq) ...
             mpc_cst(config, ctl_seq, "V_R"), opts);
        % ctl_seq_r = zeros([config.num_rec_sat*config.ctl_dim,config.T_sampling]);

        ctl_seq_t = fmincon(@(ctl_seq) loss_fun(config, cur_state, ...
            [ctl_seq; ctl_seq_r], his_obs, J2L_mat, "V_T", unit_ball_sample, ...
            non_zero_count), ini_ctl_seq(1:2*config.ctl_dim, :), [],[],[], ...
            [],[],[], @(ctl_seq) mpc_cst(config, ctl_seq, "V_T"), opts);

        ini_admissible_ctl(:, 1) = [ctl_seq_t(:,1);ctl_seq_r(:,1)];
    else

        ctl_seq_r = fmincon(@(ctl_seq) loss_fun(config, state_sample_stack(...
            :, i-1), [ini_ctl_seq(1:2*config.ctl_dim, :);ctl_seq], his_obs,...
            J2L_mat, "V_R", unit_ball_sample, non_zero_count), ini_ctl_seq( ...
            2*config.ctl_dim+1: end, :), [],[],[],[],[],[], @(ctl_seq) ...
            mpc_cst(config, ctl_seq, "V_R"), opts);
        % ctl_seq_r = zeros([config.num_rec_sat*config.ctl_dim,config.T_sampling]);

        ctl_seq_t = fmincon(@(ctl_seq) loss_fun(config, state_sample_stack(...
            :, i-1), [ctl_seq; ctl_seq_r], his_obs, J2L_mat, "V_T", ...
            unit_ball_sample, non_zero_count), ini_ctl_seq(1: 2*config.ctl_dim, ...
            :), [],[],[],[],[],[], @(ctl_seq) mpc_cst(config, ctl_seq, "V_T"), opts);

        ini_admissible_ctl(:, i) = [ctl_seq_t(:,1); ctl_seq_r(:,1)];
    end
    if norm(ini_admissible_ctl(1:config.ctl_dim, 1))> config.tgt_att_u_max

            ini_admissible_ctl(1:config.ctl_dim, 1) = config.tgt_att_u_max*...
            ini_admissible_ctl(1:config.ctl_dim, 1)/norm(ini_admissible_ctl...
            (1:config.ctl_dim, 1));
    end
    
    norm_u_max = config.tgt_orb_u_max;
    for k = 1:config.num_rec_sat+1
        if norm(ini_admissible_ctl(config.ctl_dim*k + (1:config.ctl_dim), 1)) > ...
                config.tgt_orb_u_max
            if k > 1
                norm_u_max = config.rec_orb_u_max(k-1);
            end
            ini_admissible_ctl(config.ctl_dim*k + (1:config.ctl_dim), 1) = ...
                norm_u_max*ini_admissible_ctl(config.ctl_dim*k +...
                (1:config.ctl_dim), 1)/norm(ini_admissible_ctl(config.ctl_dim*k...
                + (1:config.ctl_dim), 1));
        end
    end
    % ctl_att_tgt(:, i+1) = u_costate_att(config, costate(1:config.att_dim));
    % ctl_orb_tgt(:, i+1) = u_costate_orb_tgt(config, costate(config.att_dim...
    %     +1:end));
    % 
    % for j=1:config.num_rec_sat
    %     ctl_orb_rec((j-1)*config.ctl_dim+1:j*config.ctl_dim, i+1) = ...
    %         u_costate_orb_rec(config, costate(config.att_dim+(j-1)*...
    %         config.orb_dim+1:config.att_dim+j*config.orb_dim));
    % end
end
% ini_admissible_ctl = [ctl_att_tgt; ctl_orb_rec; ctl_orb_tgt];
end
